pipeline {
  agent {
    node {
      label 'slave'
    } 
  }
  environment {
    ANSIBLE_CONFIG = '/opt/kickstart-ansible/ansible.cfg'
  }
  stages {
    stage('Build') {
      steps {
        sh 'easy_install pip'
        sh 'pip install ansible==2.8.2'
        sh 'pip install pytest'
        git (
          url: 'https://github.com/sloopstash/kickstart-flask',
          branch: 'master'
        )
        sh 'pip install -r requirements.txt'
      }
    }
    stage('Test') {
      steps {
        sh '/usr/bin/pytest --junitxml=reports.xml script/test/main.py'
      }
      post {
        always {
          junit 'reports.xml'
        }
        success {
          input 'Congrats! The build/test of CRM App is successful. Do you want to start deployment on staging environment?'
        }
      }
    }
    stage('Deploy/Staging') {
      steps {
        ansiblePlaybook (
          credentialsId: 'ansible-node-ssh',
          disableHostKeyChecking: true,
          inventory: '/opt/kickstart-ansible/inventory/stg',
          playbook: '/opt/kickstart-ansible/playbook/redis.yml',
          // extras: '-e {"redis":{"version":"4.0.8"}}',
          tags: 'setup, configure, start'
        )
        ansiblePlaybook (
          credentialsId: 'ansible-node-ssh',
          disableHostKeyChecking: true,
          inventory: '/opt/kickstart-ansible/inventory/stg',
          playbook: '/opt/kickstart-ansible/playbook/app.yml',
          // extras: '-e {"app":{"environment":"stg"}}',
          tags: 'setup, update, configure, start',
          limit: 'crm-stg-app-1'
        )
        ansiblePlaybook (
          credentialsId: 'ansible-node-ssh',
          disableHostKeyChecking: true,
          inventory: '/opt/kickstart-ansible/inventory/prd',
          playbook: '/opt/kickstart-ansible/playbook/redis.yml',
          // extras: '-e {"redis":{"version":"4.0.8"}}',
          tags: 'setup, configure, start'
        )
        ansiblePlaybook (
          credentialsId: 'ansible-node-ssh',
          disableHostKeyChecking: true,
          inventory: '/opt/kickstart-ansible/inventory/prd',
          playbook: '/opt/kickstart-ansible/playbook/app.yml',
          // extras: '-e {"app":{"environment":"prd"}}',
          tags: 'setup, update, configure, start',
          limit: 'crm-prd-app-1'
        )
  }
}
      post {
        always {
          emailext (
            body: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n More info at: ${env.BUILD_URL}",
            recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']],
            to: 'devops@sloopstash.com',
            subject: "Jenkins Build ${currentBuild.currentResult}: Job ${env.JOB_NAME}"
          )
        }
        success {
          cleanWs(
            deleteDirs: true,
            disableDeferredWipeout: true
          )
          input 'Congrats! The deployment on production environment is successful. Do you want to start deployment on production environment?'
        }
      }
    }
  }

